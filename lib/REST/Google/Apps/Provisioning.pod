=head1 NAME

REST::Google::Apps::Provisioning - A Perl library to Google's RESTful Apps
Provisioning API

=head1 SYNOPSIS

  use REST::Google::Apps::Provisioning

  $google = REST::Google::Apps::Provisioning->new(
      domain   => 'company.com',
      username => 'admin',
      password => 'g00gl34pp5!'
  );

  $user->{'jsmith'} = $google->getUser( username => 'jsmith' );

=head1 DESCRIPTION

REST::Google::Apps::Provisioning provides a Perl interface to Google's
RESTful Apps API.

This module is currently a work-in-progress.  Please e-mail with problems,
bug fixes, comments and complaints.

=head1 CONSTRUCTOR

=over 4

=item new ( DOMAIN, USERNAME, PASSWORD )

Creates a new B<REST::Google::Apps::Provisioning> object.  A domain parameter
is required.

Supplying authentication information to the constructor is optional , but needs
to happen either here or with a call to the B<authenticate> method.

B<Example>

  $google = REST::Google::Apps::Provisioning->new(
      domain   => 'company.com',
      username => 'admin',
      password => 'g00gl34pp5!'
  );

=back

=head1 METHODS

=over 4

=item authenticate ( USERNAME, PASSWORD )

Authenticate a session.

B<Example>

  $google->authenticate(
      username => 'admin',
      password => 'g00gl34pp5!'
  )
  || die "Could not authenticate";

=item createUser ( USERNAME, GIVENNAME, FAMILYNAME, PASSWORD, PASSWORDHASHFUNCTION, ADMIN )

Create a new user.

The following parameters are required:

=over 4

=item username

The username associated with the account being created.

=item givenName

The user's given (first) name.

=item familyName

The user's family (last) name.

=item password

The user's password.

=back

The following paramaters are optional:

=over 4

=item passwordHashFunction

The format of the value in the B<password> attribute.  Currently, the only
valid values for this parameter are "SHA-1" and "MD5".

=item admin

Can be 'true' or 'false', representing whether or not the user should be
granted administrator access.

=back

B<Example>

  $user->{'jsmith'} = $google->createUser(
      username   => 'jsmith',
      givenName  => 'Joseph',
      familyName => 'Smith',
      password   => 'j5m1thp455w0rd!'
  )
  || die "Could not create user";

=item deleteUser ( USERNAME )

Delete a user.

B<Example>

  delete $user->{'jsmith'} if $google->deleteUser( username => 'jsmith' );

=item renameUser ( USERNAME, NEWNAME )

Rename a user.

B<Example>

  $google->renameUser(
      username => 'jsmith',
      newname  => 'josephsmith'
  )
  || die "Could not rename user";

=item updateUser ( USERNAME, ATTR )

Update a user's attributes.  See the B<createUser> function for a list of
valid attributes.

B<Example>

  $google->updateUser(
      username => 'jsmith',
      givenName => 'Joey'
  )
  || die "Could not update user";

=item getUser ( USER )

Retrieve a hash containing a user's account information.

B<Example>

  $user->{'jsmith'} = $google->getUser( username => 'jsmith' );

B<Hash>

Using the above example, the returned hash is:

  'jsmith' => {
      'admin' => 'false',
      'ipWhitelisted' => 'false',
      'suspended' => 'false',
      'limit' => '7168',
      'userName' => 'jsmith`',
      'changePasswordAtNextLogin' => 'false',
      'givenName' => 'Joseph',
      'familyName' => 'Smith',
      'agreedToTerms' => 'false'
  }

=item getAllUsers

Retrieve a list of all users.

B<Example>

  $users = $google->getAllUsers();

=item createGroup ( GROUP )

Create a new group.

B<Example>

  $google->createGroup(
      group => 'finance'
  )
  || die "Could not create group";

=item deleteGroup ( GROUP )

Not yet implemented.

=item updateGroup ( GROUP, ... )

Not yet implemented.

=item getGroup ( GROUP )

Retrieve a hash containing group information.

B<Example>

  $group->{'finance'} = $google->getGroup( group => 'finance' );

B<Hash>

Using the above example, the returned hash is:

  'finance' => {
      'emailPermission' => 'Anyone',
      'groupId' => 'finance@company.com',
      'updated' => '2009-09-16T21:05:15.697Z',
      'groupName' => 'finance',
      'description' => 'Finance Department'
  }

=item getAllGroups

Retrieve a list of all groups.

B<Example>

  $groups = $google->getAllGroups();

=item getGroupMembers ( GROUP )

Retrieve a list of group members.

B<Example>

  $group->{'finance'}->{'members'} = $google->getGroupMembers( group => 'finance' );

B<Hash>

Using the above example, the returned hash is:

  'members' => {
      'jsmith' => {
          'memberType' => 'User',
          'directMember' => 'true',
          'memberId' => 'jsmith@company.com'
      },
      'sschneid' => {
          'memberType' => 'User',
          'directMember' => 'true',
          'memberId' => 'sschneid@company.com'
      }
  }

=item createNickname ( USERNAME, NICKNAME )

Create a nickname (e-mail alias).

B<Example>

  $google->createNickname(
      username => 'jsmith',
      nickname => 'joe'
  )
  || die "Could not create nickname";

=item deleteNickname ( NICKNAME )

Delete a nickname (e-mail alias).

B<Example>

  $google->deleteNickname( nickname => 'joe' );

=item getNickname ( NICKNAME )

Retrieve a nickname.

B<Example>

  $nickname->{'frank'} = $google->getNickname( nickname => 'frnak' );

B<Hash>

Using the above example, the returned hash is:

  'frank' => {
      'name' => 'frank',
      'userName' => 'jsmith'
  }

=item getAllNicknames

Retrieve a list of all nicknames.

=back

=head1 AUTHOR

Scott Schneider <sschneid@gmail.com>

=cut

